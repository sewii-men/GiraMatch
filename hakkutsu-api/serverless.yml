# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: taiyoyamadahackathon
# "service" is the name of this project. This will also be added to your AWS resource names.
service: hakkutsu-api

stages:
  dev:
    params:
      tableName: "users-table-${sls:stage}"
      matchesTableName: "matches-table-${sls:stage}"
      chatsTableName: "chats-table-${sls:stage}"
      messagesTableName: "messages-table-${sls:stage}"
      checkinsTableName: "checkins-table-${sls:stage}"
      reviewsTableName: "reviews-table-${sls:stage}"
      reportsTableName: "reports-table-${sls:stage}"
      recruitmentsTableName: "recruitments-table-${sls:stage}"
      requestsTableName: "requests-table-${sls:stage}"
      allowedOrigins:
        - 'http://localhost:3000'
        - 'https://hakkutsu-git-develop-tai09to06y-3264s-projects.vercel.app'
      allowedOriginsCsv: 'http://localhost:3000,https://hakkutsu-git-develop-tai09to06y-3264s-projects.vercel.app'
  prod:
    params:
      tableName: "users-table-${sls:stage}"
      matchesTableName: "matches-table-${sls:stage}"
      chatsTableName: "chats-table-${sls:stage}"
      messagesTableName: "messages-table-${sls:stage}"
      checkinsTableName: "checkins-table-${sls:stage}"
      reviewsTableName: "reviews-table-${sls:stage}"
      reportsTableName: "reports-table-${sls:stage}"
      recruitmentsTableName: "recruitments-table-${sls:stage}"
      requestsTableName: "requests-table-${sls:stage}"
      allowedOrigins:
        - 'https://hakkutsu-app.vercel.app'
      allowedOriginsCsv: 'https://hakkutsu-app.vercel.app'

provider:
  name: aws
  runtime: nodejs20.x
  httpApi:
    cors:
      allowedOrigins: ${param:allowedOrigins}
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [MatchesTable, Arn]
            - Fn::GetAtt: [ChatsTable, Arn]
            - Fn::GetAtt: [MessagesTable, Arn]
            - Fn::GetAtt: [CheckinsTable, Arn]
            - Fn::GetAtt: [ReviewsTable, Arn]
            - Fn::GetAtt: [ReportsTable, Arn]
            - Fn::GetAtt: [RecruitmentsTable, Arn]
            - Fn::GetAtt: [RequestsTable, Arn]
  environment:
    USERS_TABLE: ${param:tableName}
    MATCHES_TABLE: ${param:matchesTableName}
    CHATS_TABLE: ${param:chatsTableName}
    MESSAGES_TABLE: ${param:messagesTableName}
    CHECKINS_TABLE: ${param:checkinsTableName}
    REVIEWS_TABLE: ${param:reviewsTableName}
    REPORTS_TABLE: ${param:reportsTableName}
    RECRUITMENTS_TABLE: ${param:recruitmentsTableName}
    REQUESTS_TABLE: ${param:requestsTableName}
    JWT_SECRET: ${env:JWT_SECRET, 'change-me-in-prod'}
    ALLOWED_ORIGINS: ${param:allowedOriginsCsv}

functions:
  api:
    handler: handler.handler
    events:
      - httpApi:
          path: /
          method: any


resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}

    MatchesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: matchId
            AttributeType: S
        KeySchema:
          - AttributeName: matchId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:matchesTableName}

    ChatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: chatId
            AttributeType: S
        KeySchema:
          - AttributeName: chatId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:chatsTableName}

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: chatId
            AttributeType: S
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: chatId
            KeyType: HASH
          - AttributeName: messageId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:messagesTableName}

    CheckinsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: matchId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: matchId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:checkinsTableName}

    ReviewsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: reviewId
            AttributeType: S
        KeySchema:
          - AttributeName: reviewId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:reviewsTableName}

    ReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: reportId
            AttributeType: S
        KeySchema:
          - AttributeName: reportId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:reportsTableName}

    RecruitmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:recruitmentsTableName}

    RequestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:requestsTableName}
