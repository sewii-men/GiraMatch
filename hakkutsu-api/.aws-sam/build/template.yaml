AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Express on AWS Lambda (no Serverless Framework)
Parameters:
  StageName:
    Type: String
    Default: dev
    Description: Deployment stage name (used in table names)
  AllowedOrigins:
    Type: CommaDelimitedList
    Default: http://localhost:3000,https://hakkutsu-app.vercel.app,https://hakkutsu-app-taiyoyamada-tai09to06y-3264s-projects.vercel.app
    Description: CORS allowed origins for the HTTP API (comma-separated)
  JwtSecret:
    Type: String
    Default: change-me-in-prod
    Description: JWT secret for signing tokens
  AdminEmail:
    Type: String
    Default: admin@test.com
    Description: Admin login email for bootstrap login
  AdminPassword:
    Type: String
    NoEcho: true
    Default: secret0101
    Description: Admin login password for bootstrap login (rotate in prod)
Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    MemorySize: 512
Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
        AllowHeaders:
        - Content-Type
        - Authorization
        AllowOrigins:
          Ref: AllowedOrigins
  ExpressFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ExpressFunction
      Handler: handler.handler
      Events:
        Root:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /
            Method: ANY
        Proxy:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          USERS_TABLE:
            Ref: UsersTable
          MATCHES_TABLE:
            Ref: MatchesTable
          CHATS_TABLE:
            Ref: ChatsTable
          MESSAGES_TABLE:
            Ref: MessagesTable
          CHECKINS_TABLE:
            Ref: CheckinsTable
          REVIEWS_TABLE:
            Ref: ReviewsTable
          REPORTS_TABLE:
            Ref: ReportsTable
          RECRUITMENTS_TABLE:
            Ref: RecruitmentsTable
          REQUESTS_TABLE:
            Ref: RequestsTable
          RESTAURANTS_TABLE:
            Ref: RestaurantsTable
          POST_MATCH_CHATS_TABLE:
            Ref: PostMatchChatsTable
          POST_MATCH_CHAT_MESSAGES_TABLE:
            Ref: PostMatchChatMessagesTable
          RESTAURANT_SHARES_TABLE:
            Ref: RestaurantSharesTable
          CHAT_PARTICIPANTS_TABLE:
            Ref: ChatParticipantsTable
          JWT_SECRET:
            Ref: JwtSecret
          ALLOWED_ORIGINS:
            Fn::Join:
            - ','
            - Ref: AllowedOrigins
          ADMIN_EMAIL:
            Ref: AdminEmail
          ADMIN_PASSWORD:
            Ref: AdminPassword
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MatchesTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChatsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MessagesTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CheckinsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ReviewsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ReportsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RecruitmentsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RequestsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RestaurantsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PostMatchChatsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PostMatchChatMessagesTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RestaurantSharesTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChatParticipantsTable
    Metadata:
      SamResourceId: ExpressFunction
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: users-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
  MatchesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: matches-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: matchId
        AttributeType: S
      KeySchema:
      - AttributeName: matchId
        KeyType: HASH
  ChatsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: chats-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: chatId
        AttributeType: S
      KeySchema:
      - AttributeName: chatId
        KeyType: HASH
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: messages-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: chatId
        AttributeType: S
      - AttributeName: messageId
        AttributeType: S
      KeySchema:
      - AttributeName: chatId
        KeyType: HASH
      - AttributeName: messageId
        KeyType: RANGE
  CheckinsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: checkins-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: matchId
        AttributeType: S
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: matchId
        KeyType: HASH
      - AttributeName: userId
        KeyType: RANGE
  ReviewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: reviews-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: reviewId
        AttributeType: S
      KeySchema:
      - AttributeName: reviewId
        KeyType: HASH
  ReportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: reports-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: reportId
        AttributeType: S
      KeySchema:
      - AttributeName: reportId
        KeyType: HASH
  RecruitmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: recruitments-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: recruiterId
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: RecruiterIdIndex
        KeySchema:
        - AttributeName: recruiterId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  RequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: requests-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: recruiterId
        AttributeType: S
      - AttributeName: requesterId
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: RecruiterIdIndex
        KeySchema:
        - AttributeName: recruiterId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      - IndexName: RequesterIdIndex
        KeySchema:
        - AttributeName: requesterId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  RestaurantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: restaurants-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: restaurant_id
        AttributeType: S
      KeySchema:
      - AttributeName: restaurant_id
        KeyType: HASH
  PostMatchChatsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: post-match-chats-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: chat_id
        AttributeType: S
      - AttributeName: match_id
        AttributeType: S
      KeySchema:
      - AttributeName: chat_id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: MatchIdIndex
        KeySchema:
        - AttributeName: match_id
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  PostMatchChatMessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: post-match-chat-messages-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: chat_id
        AttributeType: S
      - AttributeName: message_id
        AttributeType: S
      - AttributeName: created_at
        AttributeType: S
      KeySchema:
      - AttributeName: chat_id
        KeyType: HASH
      - AttributeName: message_id
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: ChatIdCreatedAtIndex
        KeySchema:
        - AttributeName: chat_id
          KeyType: HASH
        - AttributeName: created_at
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  RestaurantSharesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: restaurant-shares-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: share_id
        AttributeType: S
      KeySchema:
      - AttributeName: share_id
        KeyType: HASH
  ChatParticipantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: chat-participants-table-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: chat_id
        AttributeType: S
      - AttributeName: user_id
        AttributeType: S
      KeySchema:
      - AttributeName: chat_id
        KeyType: HASH
      - AttributeName: user_id
        KeyType: RANGE
Outputs:
  ApiUrl:
    Description: HTTPS endpoint for the Express API
    Value:
      Fn::Sub: https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
