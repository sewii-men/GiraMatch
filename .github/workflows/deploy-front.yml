name: Deploy Frontend

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  vercel-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci
        working-directory: ./hakkutsu-front

      - name: Determine stage
        id: stg
        shell: bash
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then STAGE='prod'; else STAGE='dev'; fi
          echo "stage=$STAGE" >> "$GITHUB_OUTPUT"
          if [ "$STAGE" = "prod" ]; then
            echo "stack_name=hakkutsu-api-prod" >> "$GITHUB_OUTPUT"
          else
            echo "stack_name=hakkutsu-api-dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'ap-northeast-1' }}

      - name: Resolve API URL from SAM stack
        id: api
        env:
          STACK_NAME: ${{ steps.stg.outputs.stack_name }}
        shell: bash
        run: |
          set -euo pipefail
          URL=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue | [0]" --output text || true)
          if [ -z "${URL:-}" ] || [ "$URL" = "None" ] || [ "$URL" = "null" ]; then
            echo "::error::Failed to resolve ApiUrl from stack '$STACK_NAME'. Did you deploy the API?"
            exit 1
          fi
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Resolved ApiUrl=$URL"

      - name: Vercel auth check
        run: npx vercel whoami --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}

      - name: Ensure project link (optional but robust)
        run: npx vercel link --yes --project "$VERCEL_PROJECT_ID" --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
        working-directory: ./hakkutsu-front

      - name: Pull Vercel Env
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            npx vercel pull --yes --environment=production --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"}
          else
            npx vercel pull --yes --environment=preview --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"}
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
        working-directory: ./hakkutsu-front

      - name: Deploy (remote build)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
          NEXT_PUBLIC_API_URL: ${{ steps.api.outputs.url }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${NEXT_PUBLIC_API_URL:-}" ]; then
            echo "::error::NEXT_PUBLIC_API_URL is empty. Aborting deploy."
            exit 1
          fi

          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "ðŸš€ Deploying to Production (remote build)"
            npx vercel deploy --prod --yes \
              --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"} \
              --env NEXT_PUBLIC_API_URL="$NEXT_PUBLIC_API_URL"
          else
            echo "ðŸ§ª Deploying to Preview (remote build)"
            npx vercel deploy --yes \
              --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"} \
              --env NEXT_PUBLIC_API_URL="$NEXT_PUBLIC_API_URL"
          fi
        working-directory: ./hakkutsu-front
