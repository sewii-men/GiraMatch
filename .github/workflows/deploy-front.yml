name: Deploy Frontend

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  vercel-deploy:
    runs-on: ubuntu-latest
    # (補足) もし package.json がサブディレクトリ（例: frontend/）にある場合は、
    # 以下の working-directory のコメントアウトを解除してください。
    # defaults:
    #   run:
    #     working-directory: ./frontend

    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}

    steps:
      - uses: actions/checkout@v4

      - name: Debug CWD (確認用)
        run: pwd && ls -la
        # (補足) サブディレクトリの場合:
        # working-directory: ./frontend 

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        # package-lock.json がないため npm install に変更（非推奨）
        # ※ 根本解決は package-lock.json をリポジトリにコミットすることです。
        run: npm install
        # (補足) サブディレクトリの場合:
        # working-directory: ./frontend

      - name: Determine stage
        id: stg
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then STAGE='prod'; else STAGE='dev'; fi
          echo "stage=$STAGE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Resolve API URL from SAM stack
        id: api
        env:
          STAGE: ${{ steps.stg.outputs.stage }}
        run: |
          set -euo pipefail
          if [ "$STAGE" = "prod" ]; then STACK=hakkutsu-api-prod; else STACK=hakkutsu-api-dev; fi
          URL=$(aws cloudformation describe-stacks --stack-name "$STACK" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue | [0]" --output text || true)
          if [ -z "${URL:-}" ] || [ "$URL" = "None" ] || [ "$URL" = "null" ]; then
            echo "::error::Failed to resolve ApiUrl from stack '$STACK'"
            exit 1
          fi
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      # Vercelのリモートビルド（`npx vercel deploy`）を利用する場合、
      # 'vercel pull' ステップは不要なことが多いため削除しました。

      - name: Deploy to Vercel
        env:
          NEXT_PUBLIC_API_URL: ${{ steps.api.outputs.url }}
        run: |
          set -euo pipefail
          if [ -z "${NEXT_PUBLIC_API_URL:-}" ]; then
            echo "::error::NEXT_PUBLIC_API_URL is empty"
            exit 1
          fi
          
          # ユーザーの元のロジックを維持 (VERCEL_SCOPE があれば --scope を付与)
          if [ "${{ github.ref_name }}" = "main" ]; then
            npx vercel deploy --prod --yes --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"} --env NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          else
            npx vercel deploy --yes --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"} --env NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          fi
        # (補足) サブディレクトリの場合:
        # working-directory: ./frontend