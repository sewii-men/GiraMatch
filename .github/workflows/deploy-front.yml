name: Deploy Frontend

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  vercel-deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}        # 必要なら
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} # 必要なら
      VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}           # 任意: チーム slug（例: my-team）
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Determine stage
        id: stg
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then STAGE='prod'; else STAGE='dev'; fi
          echo "stage=$STAGE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION != '' && secrets.AWS_REGION || 'ap-northeast-1' }}

      - name: Resolve API URL from SAM stack
        id: api
        env:
          STAGE: ${{ steps.stg.outputs.stage }}
        run: |
          set -euo pipefail
          if [ "$STAGE" = "prod" ]; then STACK=hakkutsu-api-prod; else STACK=hakkutsu-api-dev; fi
          URL=$(aws cloudformation describe-stacks --stack-name "$STACK" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue | [0]" --output text || true)
          # aws --output text returns 'None' when query yields nothing
          if [ -z "${URL:-}" ] || [ "$URL" = "None" ] || [ "$URL" = "null" ]; then
            echo "::error::Failed to resolve ApiUrl from stack '$STACK'. Did you deploy the API and export 'ApiUrl'?"
            echo "Resolved ApiUrl=<empty> for stage=$STAGE"
            exit 1
          fi
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Resolved ApiUrl=$URL for stage=$STAGE"

      - name: API health check
        env:
          API_URL: ${{ steps.api.outputs.url }}
        run: |
          set -euo pipefail
          echo "Probing $API_URL ..."
          # Probe root (some gateways return 404 at root even when Lambda is up)
          ROOT_STATUS=$(curl -sS -o root_resp.json -w "%{http_code}" "$API_URL/") || true
          head -c 200 root_resp.json || true
          echo
          if [ "$ROOT_STATUS" != "200" ] && [ "$ROOT_STATUS" != "404" ]; then
            echo "::error::Unexpected root status: $ROOT_STATUS (expected 200 or 404)"
            exit 1
          fi

          # Probe a known public endpoint that should be 200
          RECRUIT_STATUS=$(curl -sS -H 'Accept: application/json' -o recruit_resp.json -w "%{http_code}" "$API_URL/matching/recruitments") || true
          echo "Response body:"
          cat recruit_resp.json || true
          echo
          if [ "$RECRUIT_STATUS" != "200" ]; then
            echo "::error::/matching/recruitments unhealthy. HTTP $RECRUIT_STATUS"
            echo "::error::Response: $(cat recruit_resp.json 2>/dev/null || echo 'no response body')"
            exit 1
          fi

      - name: Vercel auth check
        run: |
          npx vercel whoami --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"}

      - name: Pull Vercel Env
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            npx vercel pull --yes --environment=production --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"}
          else
            npx vercel pull --yes --environment=preview --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"}
          fi

      # Skip local 'vercel build' to avoid ENOENT on GH runners
      # and rely on Vercel's remote builders during deploy.

      - name: Deploy
        env:
          NEXT_PUBLIC_API_URL: ${{ steps.api.outputs.url }}
        run: |
          set -euo pipefail
          if [ -z "${NEXT_PUBLIC_API_URL:-}" ]; then
            echo "::error::NEXT_PUBLIC_API_URL is empty. Aborting deploy."
            exit 1
          fi
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "🚀 Deploying to Production (remote build from repo root)"
            npx vercel deploy --prod --yes --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"} --env NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          else
            echo "🧪 Deploying to Preview (remote build from repo root)"
            npx vercel deploy --yes --token="$VERCEL_TOKEN" ${VERCEL_SCOPE:+--scope="$VERCEL_SCOPE"} --env NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          fi
